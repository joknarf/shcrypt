#!/bin/bash
# shcrypt
# Password protect encrypt shell files / variables or text/binary
# using openssl enc
# Author: Franck Jouvanceau
#

function usage
{
    cat - <<'EOF' >&2
usage:
    shell encrypt    : shcrypt -s[cu] <file|-> [<passvar>]
    var encrypt      : shcrypt -v[cu] <varname> [<passvar>]
    text/bin encrypt : shcrypt -t[cu] <file|-> [<passvar>]
    bash exec encrypt: shcrypt -b[cu] <file|-> [<passvar>]
    targz encrypt    : shcrypt -z[cu] <tar files>

    * Encrypt to a sourceable shell code protected by password:
      $ shcrypt -s <<<'myvar="mysecret"' >config.env

    * Encrypt to a sourceable shell with variable content protected by password:
      $ shcrypt -v myvar <<<'mysecret' >config.env
      if no stdin value, the secret to store will be asked without echoing

    * Encrypt to a shell that will output the decrypted content when sourced/executed:
      $ shcrypt -t <<<'mysecret' >mysecret.sh
    
    * Encrypt to a shell that will be executed by bash after decrypt:
      $ shcrypt -b <<<'echo "$@"' >myscript.sh

    * Encrypt tar zipped to auto-decrypt/extract script:
      $ shcrypt -z ./mydir >mydir.xtgz

    * -(s|v|t|b|z) : password required each time sourcing shell
    * -(sc|vc|tc|bc|zc) :
            the password is cached in shell local variable <passvar>
            the password is securely passed to openssl through fd
    * -(scu|vcu|tcu|bcu|zcu) :
            the password is cached in shell local variable <passvar>
            the password is passed to openssl through -pass pass:<pass>
            /!\ the password will appear in process table when decrypting

    * <passvar> : name of the variable to put cached password
                  the password will be cached base64 encoded 
                  in $passvar[$$]
                  needed if want to share same password/cache
                  for multiple env files
                  default: uuid based varname
EOF
    exit 1
}

function encvar
{
    read -s -p "$icon"'Secret : ' secret; echo '' >&2
    cat - <<EOF
$cachepass
$1=\$($ossldec <<'EOZ' 2>/dev/null |grep -x '.*'
$(eval $osslenc <<<"$secret" 2>/dev/null)
EOZ
) ||{ echo 'ERROR: Decrypt failed' >&2; unset $p; }
EOF
}

function encsh
{
    cat $1 <<EOF
$cachepass
. <($ossldec <<'EOZ' 2>/dev/null |grep -x '.*' || { echo 'ERROR: Decrypt failed' >&2; echo unset $p; }
$(eval $osslenc 2>/dev/null)
EOZ
)
EOF
}

function enctext
{
    cat $1 <<EOF
$cachepass
$ossldec <<'EOZ' 2>/dev/null $pipecmd||{ echo 'ERROR: Decrypt failed' >&2; unset $p; }
$(eval $osslenc 2>/dev/null)
EOZ
EOF
}

PATH='/bin:/usr/bin'
osslenc='openssl enc -aes256 -md sha512 -salt -a'
ossldec='openssl enc -aes256 -md sha512 -a -d'
opt=$1
shift
sshkey=~/.ssh/id_rsa.pub
[[ "$1" = -f ]] && sshkey=$2 && shift 2
[[ $opt != -z* ]] && p=$2 || p='' 
[[ $opt = -[cd]k ]] && p=${2:-fixed_uuid}
: ${p:=$(sed 's/[-]//g' /proc/sys/kernel/random/uuid 2>/dev/null)}
: ${p:=$(uuidgen 2>/dev/null|sed 's/[-]//g')}
: ${p:=shc_$RANDOM}
uuid="$p"
p="__$p"'[$$]'
icon='🔐' # :\U1F510
cachepass=': ${'$p$':=$(bash -c \'read -s -p "'$icon$'Password: " p;echo >&2;echo "$p"\'|base64)}'
pipecmd=''
case $opt in
-?) cachepass="";;
-?k)
    [ ! -f "$sshkey" ] && echo "Error: Cannot find ssh key $sshkey" && exit 1
    signpass=$(ssh-keygen -Y sign -f $sshkey -n file - <<<$uuid 2>/dev/null |awk 'NR>1' ORS='')
    [ ! "$signpass" ] && echo "Cannot sign with ssh key, openssh version ?" && exit 1
    sign="\$([ -f '$sshkey' ] && echo '$sshkey' || echo '<(ssh-add -L 2>/dev/null|head -n 1)')"
    ossldec="$ossldec -pass fd:3 3<<<\$(eval ssh-keygen -Y sign -f $sign -n file - <<<'$uuid' 2>/dev/null |awk 'NR>1' ORS='') 2>/dev/null"
    osslenc="$osslenc -pass fd:3 3<<<'$signpass' 2>/dev/null"
    cachepass=""
    ;;
-?c)
    ossldec="$ossldec -pass fd:3 3<<<\$(base64 -d <<<"\${$p}") 2>/dev/null"
    ;;
-?cu)
    ossldec="$ossldec -pass pass:\$(base64 -d <<<\${$p}) <<EOZ 2>/dev/null"
    ;;
esac

case "$opt" in
    -c*) cat $1 |eval $osslenc;;
    -d*) cat $1 |eval $ossldec;;
    -v*) encvar "$@";;
    -s*) encsh "$@";;
    -t*) enctext "$@";;
    -b*) pipecmd='| bash -s "$@"'; enctext "$@";;
    -z*) pipecmd='| tar xzvf - "$@"'; tar czf - "$@" |enctext;;
    *) usage;
esac
